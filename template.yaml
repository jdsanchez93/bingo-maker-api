AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for bingo-maker-api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 100

Resources:
  NetCodeWebAPIServerless:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: A simple example includes a .NET Core WebAPI App with DynamoDB table.
      CodeUri: ./src/ServerlessAPI/
      Handler: ServerlessAPI
      Runtime: dotnet8
      MemorySize: 1024
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          GAME_CONFIG_TABLE: !Ref GameConfigsTable
          GAME_BOARD_TABLE: !Ref GameBoardsTable
          USE_DYNAMODB_LOCAL: "false"
          Auth0__Domain: auth0.jd-sanchez.com
          Auth0__Audience: https://bingo-api.jd-sanchez.com
      Policies:
        # Give Create/Read/Update/Delete Permissions to the Tables
        - DynamoDBCrudPolicy:
            TableName: !Ref GameConfigsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref GameBoardsTable
      Events:
        ProxyResource:
          Type: HttpApi
          Properties:
            PayloadFormatVersion: "2.0"
            Path: /{proxy+}
            Method: ANY

  GameConfigsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: GameConfigs
      PrimaryKey:
        Name: GameId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  GameBoardsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GameBoards
      AttributeDefinitions:
        - AttributeName: GameId
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: GameId
          KeyType: HASH
        - AttributeName: UserId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # WebSocket API resources
  GameWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: GameWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  WebSocketHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      CodeUri: ./src/GameWebSocketApi/
      Handler: GameWebSocketApi::Function::Handler
      Runtime: dotnet8
      MemorySize: 512
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GameWebSocketApi}/*"
      Events:
        ConnectRoute:
          Type: Api
          Properties:
            ApiId: !Ref GameWebSocketApi
            RouteKey: $connect
        DisconnectRoute:
          Type: ApiV2
          Properties:
            ApiId: !Ref GameWebSocketApi
            RouteKey: $disconnect
        MarkItemRoute:
          Type: ApiV2
          Properties:
            ApiId: !Ref GameWebSocketApi
            RouteKey: markItem
        DefaultRoute:
          Type: ApiV2
          Properties:
            ApiId: !Ref GameWebSocketApi
            RouteKey: $default

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
  WebSocketApiUrl:
    Description: "WebSocket API endpoint"
    Value: !Sub "wss://${GameWebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/"
